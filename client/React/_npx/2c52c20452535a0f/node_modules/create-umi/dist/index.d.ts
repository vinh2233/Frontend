import { yParser } from '@umijs/utils';
import { type UmiTemplate } from './template';
interface ITemplateArgs {
    template?: UmiTemplate;
}
interface IArgs extends yParser.Arguments, ITemplateArgs {
    default?: boolean;
    git?: boolean;
    install?: boolean;
}
interface ITemplatePluginParams {
    pluginName?: string;
}
interface ITemplateParams extends ITemplatePluginParams {
    version: string;
    npmClient: ENpmClient;
    registry: string;
    author: string;
    email: string;
    withHusky: boolean;
    extraNpmrc: string;
}
declare enum ENpmClient {
    npm = "npm",
    cnpm = "cnpm",
    tnpm = "tnpm",
    yarn = "yarn",
    pnpm = "pnpm"
}
declare enum ETemplate {
    app = "app",
    max = "max",
    vueApp = "vue-app",
    plugin = "plugin"
}
export interface IDefaultData extends ITemplateParams {
    appTemplate?: ETemplate;
}
interface IGeneratorOpts {
    cwd: string;
    args: IArgs;
    defaultData?: IDefaultData;
}
declare const _default: ({ cwd, args, defaultData, }: IGeneratorOpts) => Promise<void>;
export default _default;
